{
  "commands": {
    "prefix": [
      ["utility", "eval"],
      ["bot", "commands", "customcommands", "addcustomcommand"],
      ["bot", "autoresponses", "addautoresponse"]
    ],
    "slash": [
      ["eval"],
      ["botconfig", "customcommands", "add"],
      ["botconfig", "autoresponses", "add"]
    ]
  },
  "description": [
    {
      "type": "heading",
      "text": "What is custom code?"
    },
    "Custom code is a powerful feature in Wynem that allows advanced users to write and execute custom JavaScript code directly in Discord. This gives you complete control over what happens when certain triggers occur, such as running a custom command or when an auto-response is triggered.",
    {
      "type": "heading",
      "text": "Where can custom code be used?"
    },
    "Custom code can be used in several places throughout Wynem:",
    {
      "type": "tablelist",
      "rows": [
        ["Eval command", "Run JavaScript code directly in Discord for any purpose"],
        ["Custom Commands", "Write code that executes when users run your custom command"],
        ["Auto-responses", "Write code that executes when messages trigger your auto-response"]
      ]
    },
    "For more information about these features, see the <a href=\"/features/custom-commands\" is=\"f-a\">Custom Commands</a> and <a href=\"/features/auto-responses\" is=\"f-a\">Auto-responses</a> feature pages.",
    {
      "type": "heading",
      "text": "The eval command"
    },
    "The <command:eval|eval> command allows you to run JavaScript code directly in Discord. This command uses the exact same environment as custom commands and auto-responses, giving you access to all the same functions and variables.",
    "You can use eval for whatever you want, but it's particularly good for testing code before using it in custom commands or auto-responses.",
    "To see what functions and variables are available in the environment, run `Object.keys(globalThis)` in the eval command.",
    {
      "type": "heading",
      "text": "Available variables and objects"
    },
    "Your custom code has access to several important variables and objects:",
    {
      "type": "tablelist",
      "rows": [
        ["`message`", "The Discord message object that triggered the code"],
        ["`user`", "The Discord user object who triggered the code"],
        ["`member`", "The Discord guild member object who triggered the code (null in DMs)"],
        ["`guild`", "The Discord server/guild object where the code is running (null in DMs)"],
        ["`channel`", "The Discord channel object where the code is running"],
        ["`interaction`", "Alias for the message object"],
        ["`args`", "Array of arguments provided by the user (custom commands only)"],
        ["`client`", "Bot client information including prefix, stats, emotes, and colours"]
      ]
    },
    {
      "type": "heading",
      "text": "Return values and output"
    },
    "There are multiple ways to return or output values from your code:",
    {
      "type": "tablelist",
      "rows": [
        ["Return statement", "Use a return statement to explicitly return a value"],
        ["Console logging", "Use console.log() to output debugging information"],
        ["Automatic return", "If the last line is an expression, it will automatically be returned"]
      ]
    },
    "```// This will display \"Hello world!\"\n\"Hello world!\"\n\n// This will add to the output\nconsole.log(\"Debug info\")\n\n// This will both log and return the final result\nconsole.log(\"Processing...\")\n\"Final result\"\n\n// This explicitly returns a value\nreturn \"Explicit return value\"```",
    {
      "type": "heading",
      "text": "API actions"
    },
    "Your custom code can interact with Discord through various API actions:",
    {
      "type": "tabs",
      "tabs": [
        {
          "name": "Messages",
          "content": [
            "The `sendMessage()` function is the primary way to send messages from your custom code.",
            {
              "type": "tabs",
              "tabs": [
                {
                  "name": "Text Messages",
                  "content": [
                    "Send simple text messages:",
                    "```sendMessage(\"Hello world!\")```",
                    "```sendMessage(`Hello ${user.username}!`)```",
                    {
                      "type": "embed",
                      "data": {
                        "content": "Hello world!"
                      }
                    },
                    "**Note:** For simple text output, you can also just return or console.log the text - this will automatically create a simple embed with your text as the description:",
                    "```\"Hello world!\" // This creates a simple embed automatically```",
                    "```console.log(\"Debug message\") // This also creates a simple embed```"
                  ]
                },
                {
                  "name": "Basic Embeds",
                  "content": [
                    "Send embeds with basic properties:",
                    "```sendMessage({\n  title: \"My Embed\",\n  description: \"This is an embed\",\n  color: \"#ff0000\"\n})```",
                    {
                      "type": "embed",
                      "data": {
                        "title": "My Embed",
                        "description": "This is an embed",
                        "colour": "#ff0000"
                      }
                    },
                    "```sendMessage({\n  title: \"User Info\",\n  description: `Information about ${user.username}`,\n  thumbnail: user.displayAvatarURL,\n  color: \"blue\"\n})```",
                    {
                      "type": "embed",
                      "data": {
                        "title": "User Info",
                        "description": "Information about Ewan",
                        "thumbnail": "/assets/images/logo/ewan.webp",
                        "colour": "blue"
                      }
                    }
                  ]
                },
                {
                  "name": "Advanced Embeds",
                  "content": [
                    "Create complex embeds with fields, author, and footer:",
                    "```sendMessage({\n  title: \"Advanced Embed\",\n  url: \"https://example.com\",\n  description: \"This embed has many features\",\n  author: [\"Bot Name\", \"https://wynem.com/assets/images/logo/logo.webp\", \"https://example.com\"],\n  footer: [\"Footer text\", \"https://wynem.com/assets/images/logo/logo.webp\"],\n  fields: [\n    [\"Field 1\", \"Value 1\", true],\n    [\"Field 2\", \"Value 2\", true],\n    [\"Field 3\", \"This field spans the full width\", false]\n  ],\n  thumbnail: \"https://wynem.com/assets/images/logo/logo.webp\",\n  image: \"https://wynem.com/assets/images/logo/logo.webp\",\n  color: \"#00ff00\",\n  timestamp: new Date()\n})```",
                    {
                      "type": "embed",
                      "data": {
                        "title": "Advanced Embed",
                        "url": "https://example.com",
                        "description": "This embed has many features",
                        "author": ["Bot Name", "/assets/images/logo/logo.webp", "https://example.com"],
                        "footer": ["Footer text", "/assets/images/logo/logo.webp"],
                        "fields": [
                          ["Field 1", "Value 1", true],
                          ["Field 2", "Value 2", true],
                          ["Field 3", "This field spans the full width", false]
                        ],
                        "thumbnail": "/assets/images/logo/logo.webp",
                        "image": "/assets/images/logo/logo.webp",
                        "colour": "#00ff00",
                        "timestamp": "Today at 17:31"
                      }
                    },
                    "Author, footer, and fields also support object format:",
                    "```sendMessage({\n  title: \"Object Format Example\",\n  author: { name: \"Bot Name\", iconURL: \"https://wynem.com/assets/images/logo/logo.webp\" },\n  footer: { text: \"Footer text\", iconURL: \"https://wynem.com/assets/images/logo/logo.webp\" },\n  fields: [\n    { name: \"Field 1\", value: \"Value 1\", inline: true },\n    { name: \"Field 2\", value: \"Value 2\", inline: true },\n    { name: \"Field 3\", value: \"Value 3\", inline: false }\n  ]\n})```",
                    {
                      "type": "embed",
                      "data": {
                        "title": "Object Format Example",
                        "author": ["Bot Name", "/assets/images/logo/logo.webp"],
                        "footer": ["Footer text", "/assets/images/logo/logo.webp"],
                        "fields": [
                          ["Field 1", "Value 1", true],
                          ["Field 1", "Value 2", true],
                          ["Field 2", "Value 3", false]
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            "**Multiple messages:** You can call `sendMessage()` multiple times, but it will edit the existing message with the updated content rather than sending separate messages.",
            "**Important for eval command:** The eval command always returns the output. If you're using `sendMessage()` in eval, make sure to return `undefined` to prevent the message from being edited with the return value:",
            "```sendMessage(\"Hello!\")\nreturn undefined // Prevents eval from editing the message```",
            "Custom commands and auto-responses don't have this issue - they ignore the return value if you send a message."
          ]
        },
        {
          "name": "Errors",
          "content": [
            "The `sendError()` function is specifically designed for error messages. It automatically sets the author to \"Error\" with an error icon and uses a red color scheme.",
            "**Simple error message:**",
            "```sendError(\"Something went wrong!\")```",
            {
              "type": "embed",
              "data": {
                "author": ["Error", "/assets/images/emojis/error.webp"],
                "description": "Something went wrong!",
                "colour": "#DD2E44"
              }
            },
            "**Error with title:**",
            "```sendError({\n  title: \"Invalid Input\",\n  description: \"Please provide a valid username\"\n})```",
            {
              "type": "embed",
              "data": {
                "author": ["Error", "/assets/images/emojis/error.webp"],
                "title": "Invalid Input",
                "description": "Please provide a valid username",
                "colour": "#DD2E44"
              }
            },
            "**Error with additional fields:**",
            "```sendError({\n  title: \"Command Failed\",\n  description: \"The command could not be executed\",\n  fields: [\n    [\"Error Code\", \"404\", true],\n    [\"Reason\", \"User not found\", true]\n  ]\n})```",
            {
              "type": "embed",
              "data": {
                "author": ["Error", "/assets/images/emojis/error.webp"],
                "title": "Command Failed",
                "description": "The command could not be executed",
                "fields": [
                  ["Error Code", "404", true],
                  ["Reason", "User not found", true]
                ],
                "colour": "#DD2E44"
              }
            },
            "**Important notes about sendError():**",
            {
              "type": "tablelist",
              "rows": [
                ["Author", "Automatically set to \"Error\" with the <:error:> icon"],
                ["Color", "Automatically set to `#DD2E44` (red) - cannot be overridden"],
                ["String input", "If you pass a string, it becomes the embed description"],
                ["Content property", "If you set a `content` property in an object, it will be moved to the description"],
                ["Plain text", "Plain text content (without embeds) is not supported - everything becomes an embed"]
              ]
            }
          ]
        },
        {
          "name": "Members",
          "content": [
            "Your custom code can retrieve member and user information using the `getMember()` and `getUser()` functions.",
            {
              "type": "heading",
              "text": "Get Member"
            },
            "The `getMember()` function retrieves server member information and accepts user IDs, member names, nicknames, and special shortcuts:",
            "```const member = await getMember(\"737080713181921361\")\nconst member2 = await getMember(\"Username\")\nconst member3 = await getMember(\"Display Name\")```",
            "**Shortcuts for getMember():**",
            {
              "type": "tablelist",
              "rows": [
                ["`^`", "Target the member from the previous message"],
                ["`self`", "Target yourself"],
                ["`me`", "Target yourself"],
                ["`<`", "Target yourself"],
                ["`<<`", "Target your user (will not include server-specific data like nickname and server avatar)"],
                ["`bot`", "Target the bot"]
              ]
            },
            "```const previousMember = await getMember(\"^\")\nconst myself = await getMember(\"self\")\nconst botMember = await getMember(\"bot\")```",
            {
              "type": "heading",
              "text": "Get User"
            },
            "The `getUser()` function retrieves basic Discord user information using only user IDs:",
            "```const user = await getUser(\"737080713181921361\")\nconst user2 = await getUser(member.id)```",
            {
              "type": "heading",
              "text": "Usage examples"
            },
            "```const member = await getMember(user.id)\nif (member) {\n  sendMessage(`${member.displayName} joined on ${member.joinedAt}`)\n} else {\n  sendError(\"Member not found\")\n}```",
            "```const user = await getUser(\"737080713181921361\")\nif (user) {\n  sendMessage(`${user.username} created their account on ${user.createdAt}`)\n} else {\n  sendError(\"User not found\")\n}```",
            "**Key differences:**",
            "`getMember()` returns the complete member object, which includes roles, permissions, server profile data, and also contains the user object. `getUser()` only returns basic Discord user data. Use `getUser()` when you only need basic user information or when the user might not be in the current server."
          ]
        },
        {
          "name": "Bans",
          "content": [
            "Your custom code can manage server bans using the `banUser()` and `unbanUser()` functions. These functions include automatic permission validation and error handling.",
            {
              "type": "heading",
              "text": "Ban a user"
            },
            "Provide the user's Discord ID as a string:",
            "```banUser(\"737080713181921361\")```",
            "```banUser(user.id)```",
            "**Ban with reason and message deletion:**",
            "```banUser(\"737080713181921361\", {\n  reason: \"Spamming\",\n  delete: 86400 // Delete messages from last 24 hours (in seconds)\n})```",
            {
              "type": "heading",
              "text": "Unban a user"
            },
            "Provide the user's Discord ID as a string:",
            "```unbanUser(\"737080713181921361\")```",
            "```unbanUser(\"737080713181921361\", \"Appeal accepted\")```"
          ]
        },
        {
          "name": "Kicks",
          "content": [
            "Your custom code can kick members from the server using the `kickMember()` function. This function includes automatic permission validation and error handling.",
            {
              "type": "heading",
              "text": "Kick a member"
            },
            "Provide the user's Discord ID as a string:",
            "```kickMember(\"737080713181921361\")```",
            "```kickMember(user.id)```",
            "**Kick with reason:**",
            "```kickMember(\"737080713181921361\", \"Spamming in chat\")```"
          ]
        },
        {
          "name": "Timeouts",
          "content": [
            "Your custom code can timeout members using the `timeoutMember()` function. This function includes automatic permission validation and error handling.",
            {
              "type": "heading",
              "text": "Timeout a member"
            },
            "Provide the user's Discord ID and timeout duration in milliseconds:",
            "```timeoutMember(\"737080713181921361\", 300000) // 5 minutes```",
            "```timeoutMember(user.id, 3600000) // 1 hour```",
            "**Timeout with reason:**",
            "```timeoutMember(\"737080713181921361\", 600000, \"Breaking server rules\") // 10 minutes```",
            "**Remove timeout:**",
            "```timeoutMember(\"737080713181921361\", 0) // Removes timeout```",
            "**Timeout durations:**",
            {
              "type": "tablelist",
              "rows": [
                ["Minimum", "`0` (removes timeout)"],
                ["Maximum", "`2,419,200,000` milliseconds (28 days)"]
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "text": "Permissions"
    },
    "For API actions to work, both the bot and the user executing the code must have the required permissions for that action.",
    "When code is triggered automatically (such as through auto-responses), permissions are checked against the person who originally configured the feature instead of the user who triggered it.",
    {
      "type": "heading",
      "text": "Limitations"
    },
    "Custom code has certain limitations for security and performance:",
    {
      "type": "tablelist",
      "rows": [
        ["Memory", "8MB memory limit"],
        ["Execution time", "5 second timeout"],
        ["API requests", "Limited to 5 API calls (like sendMessage) per execution"],
        ["File system", "No file system access"],
        ["Network access", "No direct network/internet access"]
      ]
    },
    {
      "type": "heading",
      "text": "Example code snippets"
    },
    "**Basic greeting with user mention:**````Hello ${user.username}! Welcome to ${guild.name}`​```",
    "**Random response:**```const responses = [\"Yes!\", \"No!\", \"Maybe...\", \"Ask again later\"]\nconst random = responses[Math.floor(Math.random() * responses.length)]\nreturn random```",
    "**Using arguments (custom commands):**```const name = args[0] ?? \"World\"\nsendMessage(`Hello ${name}!`)```",
    "**Complex embed with user info:**```sendMessage({\n  title: \"User Information\",\n  description: `Information about ${user.username}`,\n  fields: [\n    [\"User ID\", user.id, true],\n    [\"Joined Discord\", new Date(user.createdTimestamp).toLocaleDateString(), true],\n    [\"In Server Since\", member ? new Date(member.joinedTimestamp).toLocaleDateString() : \"N/A\", true]\n  ],\n  thumbnail: user.displayAvatarURL,\n  colour: \"#00ff00\"\n})```",
    {
      "type": "heading",
      "text": "Tips for writing custom code"
    },
    {
      "type": "tablelist",
      "rows": [
        ["Start simple", "Test your code thoroughly before implementing complex logic"],
        ["Use console.log()", "When testing, output debugging information - it will be shown in the response"],
        ["Use dynamic variables", "Leverage available variables like `message.content`, `user.username`, `args[0]` etc."],
        ["Modern syntax", "You can use both JavaScript and TypeScript syntax"],
        ["Handle errors", "Always handle errors gracefully - if your code throws an error, it will be displayed to the user"]
      ]
    }
  ]
}